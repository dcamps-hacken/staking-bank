{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Bank.BankStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "StatusUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardTokens",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum Bank.BankStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x12864c148d1bdc211e9292c70c54a4a1e3268ea781b42ae563557400cfeed3d6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1448007",
    "logsBloom": "0x
    "blockHash": "0x37786aa9eebbb1dfc933b1a3e84a9d1b43132d8b7f99840d75c219b95b97d5d0",
    "transactionHash": "0x12864c148d1bdc211e9292c70c54a4a1e3268ea781b42ae563557400cfeed3d6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x12864c148d1bdc211e9292c70c54a4a1e3268ea781b42ae563557400cfeed3d6",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x37786aa9eebbb1dfc933b1a3e84a9d1b43132d8b7f99840d75c219b95b97d5d0"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1448007",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "60",
    "10000000000000000000000",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "12b0294d8fae88c0fcf53bdb15e16cf0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Bank.BankStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"StatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTokens\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Bank.BankStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Bank is Ownable, ReentrancyGuard {\\n    enum BankStatus {\\n        DEPOSIT,\\n        LOCK,\\n        FIRST_UNLOCK,\\n        SECOND_UNLOCK,\\n        THIRD_UNLOCK\\n    }\\n    BankStatus public status;\\n\\n    address immutable token;\\n    uint256 immutable T;\\n    uint256 immutable t0;\\n    uint256 immutable reward;\\n\\n    uint256 private R;\\n    mapping(address => uint256) public balances;\\n    uint256 public stake;\\n\\n    event StatusUpdate(BankStatus newStatus);\\n    event Deposit(address indexed user, uint256 indexed amount);\\n    event Withdrawal(\\n        address indexed user,\\n        uint256 indexed amount,\\n        uint256 rewardTokens\\n    );\\n\\n    modifier checkStatus() {\\n        _updateStatus();\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _interval,\\n        uint256 _reward,\\n        address _token\\n    ) {\\n        T = _interval;\\n        t0 = block.timestamp;\\n        reward = _reward;\\n        R = 0;\\n        token = _token;\\n        //requires owner approval --> permit?\\n        /* IERC20(_token).transferFrom(msg.sender, address(this), _reward); */\\n    }\\n\\n    // manage direct tokens/eth sent to the contract.\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    //requires user approval\\n    function deposit(uint256 _amount) external nonReentrant checkStatus {\\n        require(status == BankStatus.DEPOSIT, \\\"Deposit period not active!\\\");\\n        IERC20(token).transferFrom(msg.sender, address(this), _amount);\\n        balances[msg.sender] += _amount;\\n        stake += balances[msg.sender];\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    function withdraw() external nonReentrant checkStatus {\\n        require(\\n            status != BankStatus(0) && status != BankStatus(1),\\n            \\\"Withdrawals not available yet!\\\"\\n        );\\n        require(balances[msg.sender] > 0, \\\"No tokens to withdraw!\\\");\\n        uint256 yield = R * (balances[msg.sender] / stake);\\n        uint256 balance = balances[msg.sender];\\n        stake -= balances[msg.sender];\\n        balances[msg.sender] = 0;\\n        IERC20(token).transfer(msg.sender, balance + yield);\\n        emit Withdrawal(msg.sender, balance, yield);\\n    }\\n\\n    function recall() external onlyOwner checkStatus {\\n        require(status == BankStatus.THIRD_UNLOCK);\\n        require(stake == 0); // can it actually be 0?\\n        IERC20(token).transfer(msg.sender, R);\\n    }\\n\\n    function _updateStatus() private onlyOwner {\\n        // Make sure all are whole numbers!!\\n        if (block.timestamp <= (t0 + T)) {\\n            if (status != BankStatus.LOCK) {\\n                status = BankStatus.LOCK;\\n                emit StatusUpdate(status);\\n            }\\n        } else if (\\n            (t0 + 2 * T) <= block.timestamp && block.timestamp < (t0 + 3 * T)\\n        ) {\\n            if (status != BankStatus.FIRST_UNLOCK) {\\n                status = BankStatus.FIRST_UNLOCK;\\n                emit StatusUpdate(status);\\n                R += (reward * 2) / 10;\\n            }\\n        } else if (\\n            (t0 + 3 * T) <= block.timestamp && block.timestamp < (t0 + 4 * T)\\n        ) {\\n            if (status != BankStatus.SECOND_UNLOCK) {\\n                status = BankStatus.SECOND_UNLOCK;\\n                emit StatusUpdate(status);\\n                R += (reward * 3) / 10;\\n            }\\n        } else {\\n            if (status != BankStatus.THIRD_UNLOCK) {\\n                status = BankStatus.THIRD_UNLOCK;\\n                emit StatusUpdate(status);\\n                R += (reward * 5) / 10;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x83189e1600ce796b71ecf47d61cc91e6b46a676527f1f39071d40972c8b4268f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001b6b38038062001b6b8339818101604052810190620000389190620001b9565b620000586200004c620000bf60201b60201c565b620000c760201b60201c565b600180819055508260a081815250504260c081815250508160e0818152505060006003819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050506200028c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200019c8162000258565b92915050565b600081519050620001b38162000272565b92915050565b600080600060608486031215620001d557620001d462000253565b5b6000620001e586828701620001a2565b9350506020620001f886828701620001a2565b92505060406200020b868287016200018b565b9150509250925092565b6000620002228262000229565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b620002638162000215565b81146200026f57600080fd5b50565b6200027d8162000249565b81146200028957600080fd5b50565b60805160601c60a05160c05160e05161184e6200031d60003960008181610ce601528181610eab0152610fad015260008181610a9201528181610ba301528181610c0401528181610d670152610dc8015260008181610a7101528181610b7601528181610bd701528181610d3a0152610d9b01526000818161050d015281816107290152610933015261184e6000f3fe60806040526004361061008a5760003560e01c8063715018a611610059578063715018a61461013d5780638da5cb5b14610154578063b6b55f251461017f578063d4270d60146101a8578063f2fde38b146101bf57610091565b8063200d2ed21461009357806327e235e3146100be5780633a4b66f1146100fb5780633ccfd60b1461012657610091565b3661009157005b005b34801561009f57600080fd5b506100a86101e8565b6040516100b59190611388565b60405180910390f35b3480156100ca57600080fd5b506100e560048036038101906100e09190611187565b6101fb565b6040516100f29190611463565b60405180910390f35b34801561010757600080fd5b50610110610213565b60405161011d9190611463565b60405180910390f35b34801561013257600080fd5b5061013b610219565b005b34801561014957600080fd5b5061015261061e565b005b34801561016057600080fd5b50610169610632565b604051610176919061130d565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a191906111e1565b61065b565b005b3480156101b457600080fd5b506101bd6108d3565b005b3480156101cb57600080fd5b506101e660048036038101906101e19190611187565b6109e3565b005b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60055481565b6002600154141561025f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025690611443565b60405180910390fd5b600260018190555061026f610a67565b600060048111156102835761028261166f565b5b60048111156102955761029461166f565b5b600260009054906101000a900460ff1660048111156102b7576102b661166f565b5b1415801561030b5750600160048111156102d4576102d361166f565b5b60048111156102e6576102e561166f565b5b600260009054906101000a900460ff1660048111156103085761030761166f565b5b14155b61034a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610341906113a3565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c3906113e3565b60405180910390fd5b6000600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461041b91906114e5565b6003546104289190611516565b90506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008282546104bf9190611570565b925050819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338484610554919061148f565b6040518363ffffffff1660e01b815260040161057192919061135f565b602060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c391906111b4565b50803373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8460405161060b9190611463565b60405180910390a3505060018081905550565b610626610ffe565b610630600061107c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260015414156106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611443565b60405180910390fd5b60026001819055506106b1610a67565b600060048111156106c5576106c461166f565b5b600260009054906101000a900460ff1660048111156106e7576106e661166f565b5b14610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e90611423565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161078493929190611328565b602060405180830381600087803b15801561079e57600080fd5b505af11580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d691906111b4565b5080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610826919061148f565b92505081905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546005600082825461087e919061148f565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60405160405180910390a36001808190555050565b6108db610ffe565b6108e3610a67565b6004808111156108f6576108f561166f565b5b600260009054906101000a900460ff1660048111156109185761091761166f565b5b1461092257600080fd5b60006005541461093157600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336003546040518363ffffffff1660e01b815260040161098e92919061135f565b602060405180830381600087803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e091906111b4565b50565b6109eb610ffe565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a52906113c3565b60405180910390fd5b610a648161107c565b50565b610a6f610ffe565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610abb919061148f565b4211610b735760016004811115610ad557610ad461166f565b5b600260009054906101000a900460ff166004811115610af757610af661166f565b5b14610b6e576001600260006101000a81548160ff02191690836004811115610b2257610b2161166f565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610b659190611388565b60405180910390a15b610ffc565b427f00000000000000000000000000000000000000000000000000000000000000006002610ba19190611516565b7f0000000000000000000000000000000000000000000000000000000000000000610bcc919061148f565b11158015610c3057507f00000000000000000000000000000000000000000000000000000000000000006003610c029190611516565b7f0000000000000000000000000000000000000000000000000000000000000000610c2d919061148f565b42105b15610d375760026004811115610c4957610c4861166f565b5b600260009054906101000a900460ff166004811115610c6b57610c6a61166f565b5b14610d325760028060006101000a81548160ff02191690836004811115610c9557610c9461166f565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610cd89190611388565b60405180910390a1600a60027f0000000000000000000000000000000000000000000000000000000000000000610d0f9190611516565b610d1991906114e5565b60036000828254610d2a919061148f565b925050819055505b610ffb565b427f00000000000000000000000000000000000000000000000000000000000000006003610d659190611516565b7f0000000000000000000000000000000000000000000000000000000000000000610d90919061148f565b11158015610df457507f00000000000000000000000000000000000000000000000000000000000000006004610dc69190611516565b7f0000000000000000000000000000000000000000000000000000000000000000610df1919061148f565b42105b15610efc5760036004811115610e0d57610e0c61166f565b5b600260009054906101000a900460ff166004811115610e2f57610e2e61166f565b5b14610ef7576003600260006101000a81548160ff02191690836004811115610e5a57610e5961166f565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610e9d9190611388565b60405180910390a1600a60037f0000000000000000000000000000000000000000000000000000000000000000610ed49190611516565b610ede91906114e5565b60036000828254610eef919061148f565b925050819055505b610ffa565b600480811115610f0f57610f0e61166f565b5b600260009054906101000a900460ff166004811115610f3157610f3061166f565b5b14610ff9576004600260006101000a81548160ff02191690836004811115610f5c57610f5b61166f565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610f9f9190611388565b60405180910390a1600a60057f0000000000000000000000000000000000000000000000000000000000000000610fd69190611516565b610fe091906114e5565b60036000828254610ff1919061148f565b925050819055505b5b5b5b565b611006611140565b73ffffffffffffffffffffffffffffffffffffffff16611024610632565b73ffffffffffffffffffffffffffffffffffffffff161461107a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107190611403565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050611157816117d3565b92915050565b60008151905061116c816117ea565b92915050565b60008135905061118181611801565b92915050565b60006020828403121561119d5761119c61169e565b5b60006111ab84828501611148565b91505092915050565b6000602082840312156111ca576111c961169e565b5b60006111d88482850161115d565b91505092915050565b6000602082840312156111f7576111f661169e565b5b600061120584828501611172565b91505092915050565b611217816115a4565b82525050565b611226816115ff565b82525050565b6000611239601e8361147e565b9150611244826116a3565b602082019050919050565b600061125c60268361147e565b9150611267826116cc565b604082019050919050565b600061127f60168361147e565b915061128a8261171b565b602082019050919050565b60006112a260208361147e565b91506112ad82611744565b602082019050919050565b60006112c5601a8361147e565b91506112d08261176d565b602082019050919050565b60006112e8601f8361147e565b91506112f382611796565b602082019050919050565b611307816115f5565b82525050565b6000602082019050611322600083018461120e565b92915050565b600060608201905061133d600083018661120e565b61134a602083018561120e565b61135760408301846112fe565b949350505050565b6000604082019050611374600083018561120e565b61138160208301846112fe565b9392505050565b600060208201905061139d600083018461121d565b92915050565b600060208201905081810360008301526113bc8161122c565b9050919050565b600060208201905081810360008301526113dc8161124f565b9050919050565b600060208201905081810360008301526113fc81611272565b9050919050565b6000602082019050818103600083015261141c81611295565b9050919050565b6000602082019050818103600083015261143c816112b8565b9050919050565b6000602082019050818103600083015261145c816112db565b9050919050565b600060208201905061147860008301846112fe565b92915050565b600082825260208201905092915050565b600061149a826115f5565b91506114a5836115f5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114da576114d9611611565b5b828201905092915050565b60006114f0826115f5565b91506114fb836115f5565b92508261150b5761150a611640565b5b828204905092915050565b6000611521826115f5565b915061152c836115f5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561156557611564611611565b5b828202905092915050565b600061157b826115f5565b9150611586836115f5565b92508282101561159957611598611611565b5b828203905092915050565b60006115af826115d5565b9050919050565b60008115159050919050565b60008190506115d0826117bf565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061160a826115c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b7f5769746864726177616c73206e6f7420617661696c61626c6520796574210000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f20746f6b656e7320746f2077697468647261772100000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4465706f73697420706572696f64206e6f742061637469766521000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600581106117d0576117cf61166f565b5b50565b6117dc816115a4565b81146117e757600080fd5b50565b6117f3816115b6565b81146117fe57600080fd5b50565b61180a816115f5565b811461181557600080fd5b5056fea2646970667358221220ea25a52d5b51f549c0ed632fe2fd73a4cd2fb38ae6ca2921b60d6b891b9dcaf364736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063715018a611610059578063715018a61461013d5780638da5cb5b14610154578063b6b55f251461017f578063d4270d60146101a8578063f2fde38b146101bf57610091565b8063200d2ed21461009357806327e235e3146100be5780633a4b66f1146100fb5780633ccfd60b1461012657610091565b3661009157005b005b34801561009f57600080fd5b506100a86101e8565b6040516100b59190611388565b60405180910390f35b3480156100ca57600080fd5b506100e560048036038101906100e09190611187565b6101fb565b6040516100f29190611463565b60405180910390f35b34801561010757600080fd5b50610110610213565b60405161011d9190611463565b60405180910390f35b34801561013257600080fd5b5061013b610219565b005b34801561014957600080fd5b5061015261061e565b005b34801561016057600080fd5b50610169610632565b604051610176919061130d565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a191906111e1565b61065b565b005b3480156101b457600080fd5b506101bd6108d3565b005b3480156101cb57600080fd5b506101e660048036038101906101e19190611187565b6109e3565b005b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60055481565b6002600154141561025f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025690611443565b60405180910390fd5b600260018190555061026f610a67565b600060048111156102835761028261166f565b5b60048111156102955761029461166f565b5b600260009054906101000a900460ff1660048111156102b7576102b661166f565b5b1415801561030b5750600160048111156102d4576102d361166f565b5b60048111156102e6576102e561166f565b5b600260009054906101000a900460ff1660048111156103085761030761166f565b5b14155b61034a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610341906113a3565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c3906113e3565b60405180910390fd5b6000600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461041b91906114e5565b6003546104289190611516565b90506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008282546104bf9190611570565b925050819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338484610554919061148f565b6040518363ffffffff1660e01b815260040161057192919061135f565b602060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c391906111b4565b50803373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8460405161060b9190611463565b60405180910390a3505060018081905550565b610626610ffe565b610630600061107c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260015414156106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611443565b60405180910390fd5b60026001819055506106b1610a67565b600060048111156106c5576106c461166f565b5b600260009054906101000a900460ff1660048111156106e7576106e661166f565b5b14610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e90611423565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161078493929190611328565b602060405180830381600087803b15801561079e57600080fd5b505af11580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d691906111b4565b5080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610826919061148f565b92505081905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546005600082825461087e919061148f565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60405160405180910390a36001808190555050565b6108db610ffe565b6108e3610a67565b6004808111156108f6576108f561166f565b5b600260009054906101000a900460ff1660048111156109185761091761166f565b5b1461092257600080fd5b60006005541461093157600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336003546040518363ffffffff1660e01b815260040161098e92919061135f565b602060405180830381600087803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e091906111b4565b50565b6109eb610ffe565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a52906113c3565b60405180910390fd5b610a648161107c565b50565b610a6f610ffe565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610abb919061148f565b4211610b735760016004811115610ad557610ad461166f565b5b600260009054906101000a900460ff166004811115610af757610af661166f565b5b14610b6e576001600260006101000a81548160ff02191690836004811115610b2257610b2161166f565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610b659190611388565b60405180910390a15b610ffc565b427f00000000000000000000000000000000000000000000000000000000000000006002610ba19190611516565b7f0000000000000000000000000000000000000000000000000000000000000000610bcc919061148f565b11158015610c3057507f00000000000000000000000000000000000000000000000000000000000000006003610c029190611516565b7f0000000000000000000000000000000000000000000000000000000000000000610c2d919061148f565b42105b15610d375760026004811115610c4957610c4861166f565b5b600260009054906101000a900460ff166004811115610c6b57610c6a61166f565b5b14610d325760028060006101000a81548160ff02191690836004811115610c9557610c9461166f565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610cd89190611388565b60405180910390a1600a60027f0000000000000000000000000000000000000000000000000000000000000000610d0f9190611516565b610d1991906114e5565b60036000828254610d2a919061148f565b925050819055505b610ffb565b427f00000000000000000000000000000000000000000000000000000000000000006003610d659190611516565b7f0000000000000000000000000000000000000000000000000000000000000000610d90919061148f565b11158015610df457507f00000000000000000000000000000000000000000000000000000000000000006004610dc69190611516565b7f0000000000000000000000000000000000000000000000000000000000000000610df1919061148f565b42105b15610efc5760036004811115610e0d57610e0c61166f565b5b600260009054906101000a900460ff166004811115610e2f57610e2e61166f565b5b14610ef7576003600260006101000a81548160ff02191690836004811115610e5a57610e5961166f565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610e9d9190611388565b60405180910390a1600a60037f0000000000000000000000000000000000000000000000000000000000000000610ed49190611516565b610ede91906114e5565b60036000828254610eef919061148f565b925050819055505b610ffa565b600480811115610f0f57610f0e61166f565b5b600260009054906101000a900460ff166004811115610f3157610f3061166f565b5b14610ff9576004600260006101000a81548160ff02191690836004811115610f5c57610f5b61166f565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610f9f9190611388565b60405180910390a1600a60057f0000000000000000000000000000000000000000000000000000000000000000610fd69190611516565b610fe091906114e5565b60036000828254610ff1919061148f565b925050819055505b5b5b5b565b611006611140565b73ffffffffffffffffffffffffffffffffffffffff16611024610632565b73ffffffffffffffffffffffffffffffffffffffff161461107a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107190611403565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050611157816117d3565b92915050565b60008151905061116c816117ea565b92915050565b60008135905061118181611801565b92915050565b60006020828403121561119d5761119c61169e565b5b60006111ab84828501611148565b91505092915050565b6000602082840312156111ca576111c961169e565b5b60006111d88482850161115d565b91505092915050565b6000602082840312156111f7576111f661169e565b5b600061120584828501611172565b91505092915050565b611217816115a4565b82525050565b611226816115ff565b82525050565b6000611239601e8361147e565b9150611244826116a3565b602082019050919050565b600061125c60268361147e565b9150611267826116cc565b604082019050919050565b600061127f60168361147e565b915061128a8261171b565b602082019050919050565b60006112a260208361147e565b91506112ad82611744565b602082019050919050565b60006112c5601a8361147e565b91506112d08261176d565b602082019050919050565b60006112e8601f8361147e565b91506112f382611796565b602082019050919050565b611307816115f5565b82525050565b6000602082019050611322600083018461120e565b92915050565b600060608201905061133d600083018661120e565b61134a602083018561120e565b61135760408301846112fe565b949350505050565b6000604082019050611374600083018561120e565b61138160208301846112fe565b9392505050565b600060208201905061139d600083018461121d565b92915050565b600060208201905081810360008301526113bc8161122c565b9050919050565b600060208201905081810360008301526113dc8161124f565b9050919050565b600060208201905081810360008301526113fc81611272565b9050919050565b6000602082019050818103600083015261141c81611295565b9050919050565b6000602082019050818103600083015261143c816112b8565b9050919050565b6000602082019050818103600083015261145c816112db565b9050919050565b600060208201905061147860008301846112fe565b92915050565b600082825260208201905092915050565b600061149a826115f5565b91506114a5836115f5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114da576114d9611611565b5b828201905092915050565b60006114f0826115f5565b91506114fb836115f5565b92508261150b5761150a611640565b5b828204905092915050565b6000611521826115f5565b915061152c836115f5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561156557611564611611565b5b828202905092915050565b600061157b826115f5565b9150611586836115f5565b92508282101561159957611598611611565b5b828203905092915050565b60006115af826115d5565b9050919050565b60008115159050919050565b60008190506115d0826117bf565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061160a826115c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b7f5769746864726177616c73206e6f7420617661696c61626c6520796574210000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f20746f6b656e7320746f2077697468647261772100000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4465706f73697420706572696f64206e6f742061637469766521000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600581106117d0576117cf61166f565b5b50565b6117dc816115a4565b81146117e757600080fd5b50565b6117f3816115b6565b81146117fe57600080fd5b50565b61180a816115f5565b811461181557600080fd5b5056fea2646970667358221220ea25a52d5b51f549c0ed632fe2fd73a4cd2fb38ae6ca2921b60d6b891b9dcaf364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bank.sol:Bank",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Bank.sol:Bank",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 270,
        "contract": "contracts/Bank.sol:Bank",
        "label": "status",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(BankStatus)267"
      },
      {
        "astId": 280,
        "contract": "contracts/Bank.sol:Bank",
        "label": "R",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 284,
        "contract": "contracts/Bank.sol:Bank",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 286,
        "contract": "contracts/Bank.sol:Bank",
        "label": "stake",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(BankStatus)267": {
        "encoding": "inplace",
        "label": "enum Bank.BankStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}