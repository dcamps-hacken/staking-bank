{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Bank.BankStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "StatusUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardTokens",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum Bank.BankStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2d32b9a88bff3b6302acdfc95eda8025216237067b74e4ea0dba65474c054bff",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1467672",
    "logsBloom": "0x
    "blockHash": "0x837993e76cfe3074aff3d45a5f8c724789c96e11e3ba9926ac7873bcc2d8b541",
    "transactionHash": "0x2d32b9a88bff3b6302acdfc95eda8025216237067b74e4ea0dba65474c054bff",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x2d32b9a88bff3b6302acdfc95eda8025216237067b74e4ea0dba65474c054bff",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x837993e76cfe3074aff3d45a5f8c724789c96e11e3ba9926ac7873bcc2d8b541"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x2d32b9a88bff3b6302acdfc95eda8025216237067b74e4ea0dba65474c054bff",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000cf7ed3acca5a467e9e704c703e8d87f634fb0fc9",
          "0x000000000000000000000000cf7ed3acca5a467e9e704c703e8d87f634fb0fc9"
        ],
        "data": "0x00000000000000000000000000000000000000000000021e19e0c9bab2400000",
        "logIndex": 1,
        "blockHash": "0x837993e76cfe3074aff3d45a5f8c724789c96e11e3ba9926ac7873bcc2d8b541"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1467672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "60",
    "10000000000000000000000",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "dc59ce1897d6a4f09a01a7f63775326b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Bank.BankStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"StatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTokens\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Bank.BankStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Bank is Ownable, ReentrancyGuard {\\n    enum BankStatus {\\n        DEPOSIT,\\n        LOCK,\\n        FIRST_UNLOCK,\\n        SECOND_UNLOCK,\\n        THIRD_UNLOCK\\n    }\\n    BankStatus public status;\\n\\n    address immutable token;\\n    uint256 immutable T;\\n    uint256 immutable t0;\\n    uint256 immutable reward;\\n\\n    uint256 private R;\\n    mapping(address => uint256) public balances;\\n    uint256 public stake;\\n\\n    event StatusUpdate(BankStatus newStatus);\\n    event Deposit(address indexed user, uint256 indexed amount);\\n    event Withdrawal(\\n        address indexed user,\\n        uint256 indexed amount,\\n        uint256 rewardTokens\\n    );\\n\\n    modifier checkStatus() {\\n        _updateStatus();\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _interval,\\n        uint256 _reward,\\n        address _token\\n    ) {\\n        T = _interval;\\n        t0 = block.timestamp;\\n        reward = _reward;\\n        R = 0;\\n        token = _token;\\n        IERC20(_token).approve(address(this), _reward);\\n        /* IERC20(_token).transferFrom(msg.sender, address(this), _reward); */\\n    }\\n\\n    // manage direct tokens/eth sent to the contract.\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    function deposit(uint256 _amount) external nonReentrant checkStatus {\\n        require(status == BankStatus.DEPOSIT, \\\"Deposit period has passed!\\\");\\n        IERC20(token).transfer(address(this), _amount);\\n        balances[msg.sender] += _amount;\\n        stake += balances[msg.sender];\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    function withdraw() external nonReentrant checkStatus {\\n        require(\\n            status != BankStatus(0) && status != BankStatus(1),\\n            \\\"Withdrawals not available yet!\\\"\\n        );\\n        require(balances[msg.sender] > 0, \\\"No tokens to withdraw!\\\");\\n        uint256 yield = R * (balances[msg.sender] / stake);\\n        uint256 balance = balances[msg.sender];\\n        stake -= balances[msg.sender];\\n        balances[msg.sender] = 0;\\n        IERC20(token).transfer(msg.sender, balance + yield);\\n        emit Withdrawal(msg.sender, balance, yield);\\n    }\\n\\n    function recall() external onlyOwner {\\n        require(status == BankStatus.THIRD_UNLOCK);\\n        require(stake == 0); // can it actually be 0?\\n        IERC20(token).transfer(msg.sender, R);\\n    }\\n\\n    function _updateStatus() private onlyOwner {\\n        // Make sure all are whole numbers!!\\n        if (block.timestamp <= (t0 + T)) {\\n            if (status != BankStatus.LOCK) {\\n                status = BankStatus.LOCK;\\n                emit StatusUpdate(status);\\n            }\\n        } else if (\\n            (t0 + 2 * T) <= block.timestamp && block.timestamp < (t0 + 3 * T)\\n        ) {\\n            if (status != BankStatus.FIRST_UNLOCK) {\\n                status = BankStatus.FIRST_UNLOCK;\\n                emit StatusUpdate(status);\\n                R += (reward * 2) / 10;\\n            }\\n        } else if (\\n            (t0 + 3 * T) <= block.timestamp && block.timestamp < (t0 + 4 * T)\\n        ) {\\n            if (status != BankStatus.SECOND_UNLOCK) {\\n                status = BankStatus.SECOND_UNLOCK;\\n                emit StatusUpdate(status);\\n                R += (reward * 3) / 10;\\n            }\\n        } else {\\n            if (status != BankStatus.THIRD_UNLOCK) {\\n                status = BankStatus.THIRD_UNLOCK;\\n                emit StatusUpdate(status);\\n                R += (reward * 5) / 10;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x676d0f54aa1fd6294bb5a1b907daa4b2439e2bf2f422167726ce244d6ed5c11b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001c7c38038062001c7c833981810160405281019062000038919062000296565b620000586200004c6200015360201b60201c565b6200015b60201b60201c565b600180819055508260a081815250504260c081815250508160e0818152505060006003819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b330846040518363ffffffff1660e01b8152600401620000f392919062000314565b602060405180830381600087803b1580156200010e57600080fd5b505af115801562000123573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000149919062000264565b50505050620003de565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620002308162000390565b92915050565b6000815190506200024781620003aa565b92915050565b6000815190506200025e81620003c4565b92915050565b6000602082840312156200027d576200027c6200038b565b5b60006200028d8482850162000236565b91505092915050565b600080600060608486031215620002b257620002b16200038b565b5b6000620002c2868287016200024d565b9350506020620002d5868287016200024d565b9250506040620002e8868287016200021f565b9150509250925092565b620002fd8162000341565b82525050565b6200030e8162000381565b82525050565b60006040820190506200032b6000830185620002f2565b6200033a602083018462000303565b9392505050565b60006200034e8262000361565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b6200039b8162000341565b8114620003a757600080fd5b50565b620003b58162000355565b8114620003c157600080fd5b50565b620003cf8162000381565b8114620003db57600080fd5b50565b60805160601c60a05160c05160e05161180d6200046f60003960008181610cdc01528181610ea10152610fa3015260008181610a8801528181610b9901528181610bfa01528181610d5d0152610dbe015260008181610a6701528181610b6c01528181610bcd01528181610d300152610d9101526000818161050d015281816107290152610929015261180d6000f3fe60806040526004361061008a5760003560e01c8063715018a611610059578063715018a61461013d5780638da5cb5b14610154578063b6b55f251461017f578063d4270d60146101a8578063f2fde38b146101bf57610091565b8063200d2ed21461009357806327e235e3146100be5780633a4b66f1146100fb5780633ccfd60b1461012657610091565b3661009157005b005b34801561009f57600080fd5b506100a86101e8565b6040516100b59190611347565b60405180910390f35b3480156100ca57600080fd5b506100e560048036038101906100e0919061117d565b6101fb565b6040516100f29190611422565b60405180910390f35b34801561010757600080fd5b50610110610213565b60405161011d9190611422565b60405180910390f35b34801561013257600080fd5b5061013b610219565b005b34801561014957600080fd5b5061015261061e565b005b34801561016057600080fd5b50610169610632565b6040516101769190611303565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a191906111d7565b61065b565b005b3480156101b457600080fd5b506101bd6108d1565b005b3480156101cb57600080fd5b506101e660048036038101906101e1919061117d565b6109d9565b005b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60055481565b6002600154141561025f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025690611402565b60405180910390fd5b600260018190555061026f610a5d565b600060048111156102835761028261162e565b5b60048111156102955761029461162e565b5b600260009054906101000a900460ff1660048111156102b7576102b661162e565b5b1415801561030b5750600160048111156102d4576102d361162e565b5b60048111156102e6576102e561162e565b5b600260009054906101000a900460ff1660048111156103085761030761162e565b5b14155b61034a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034190611362565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c3906113a2565b60405180910390fd5b6000600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461041b91906114a4565b60035461042891906114d5565b90506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008282546104bf919061152f565b925050819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338484610554919061144e565b6040518363ffffffff1660e01b815260040161057192919061131e565b602060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c391906111aa565b50803373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8460405161060b9190611422565b60405180910390a3505060018081905550565b610626610ff4565b6106306000611072565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260015414156106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890611402565b60405180910390fd5b60026001819055506106b1610a5d565b600060048111156106c5576106c461162e565b5b600260009054906101000a900460ff1660048111156106e7576106e661162e565b5b14610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e906113c2565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb30836040518363ffffffff1660e01b815260040161078292919061131e565b602060405180830381600087803b15801561079c57600080fd5b505af11580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d491906111aa565b5080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610824919061144e565b92505081905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546005600082825461087c919061144e565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60405160405180910390a36001808190555050565b6108d9610ff4565b6004808111156108ec576108eb61162e565b5b600260009054906101000a900460ff16600481111561090e5761090d61162e565b5b1461091857600080fd5b60006005541461092757600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336003546040518363ffffffff1660e01b815260040161098492919061131e565b602060405180830381600087803b15801561099e57600080fd5b505af11580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d691906111aa565b50565b6109e1610ff4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890611382565b60405180910390fd5b610a5a81611072565b50565b610a65610ff4565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610ab1919061144e565b4211610b695760016004811115610acb57610aca61162e565b5b600260009054906101000a900460ff166004811115610aed57610aec61162e565b5b14610b64576001600260006101000a81548160ff02191690836004811115610b1857610b1761162e565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610b5b9190611347565b60405180910390a15b610ff2565b427f00000000000000000000000000000000000000000000000000000000000000006002610b9791906114d5565b7f0000000000000000000000000000000000000000000000000000000000000000610bc2919061144e565b11158015610c2657507f00000000000000000000000000000000000000000000000000000000000000006003610bf891906114d5565b7f0000000000000000000000000000000000000000000000000000000000000000610c23919061144e565b42105b15610d2d5760026004811115610c3f57610c3e61162e565b5b600260009054906101000a900460ff166004811115610c6157610c6061162e565b5b14610d285760028060006101000a81548160ff02191690836004811115610c8b57610c8a61162e565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610cce9190611347565b60405180910390a1600a60027f0000000000000000000000000000000000000000000000000000000000000000610d0591906114d5565b610d0f91906114a4565b60036000828254610d20919061144e565b925050819055505b610ff1565b427f00000000000000000000000000000000000000000000000000000000000000006003610d5b91906114d5565b7f0000000000000000000000000000000000000000000000000000000000000000610d86919061144e565b11158015610dea57507f00000000000000000000000000000000000000000000000000000000000000006004610dbc91906114d5565b7f0000000000000000000000000000000000000000000000000000000000000000610de7919061144e565b42105b15610ef25760036004811115610e0357610e0261162e565b5b600260009054906101000a900460ff166004811115610e2557610e2461162e565b5b14610eed576003600260006101000a81548160ff02191690836004811115610e5057610e4f61162e565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610e939190611347565b60405180910390a1600a60037f0000000000000000000000000000000000000000000000000000000000000000610eca91906114d5565b610ed491906114a4565b60036000828254610ee5919061144e565b925050819055505b610ff0565b600480811115610f0557610f0461162e565b5b600260009054906101000a900460ff166004811115610f2757610f2661162e565b5b14610fef576004600260006101000a81548160ff02191690836004811115610f5257610f5161162e565b5b02179055507f504eaf1c308a9514233b8d6364a1d4d333824d8ab51add90e420d54b18ba785b600260009054906101000a900460ff16604051610f959190611347565b60405180910390a1600a60057f0000000000000000000000000000000000000000000000000000000000000000610fcc91906114d5565b610fd691906114a4565b60036000828254610fe7919061144e565b925050819055505b5b5b5b565b610ffc611136565b73ffffffffffffffffffffffffffffffffffffffff1661101a610632565b73ffffffffffffffffffffffffffffffffffffffff1614611070576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611067906113e2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b60008135905061114d81611792565b92915050565b600081519050611162816117a9565b92915050565b600081359050611177816117c0565b92915050565b6000602082840312156111935761119261165d565b5b60006111a18482850161113e565b91505092915050565b6000602082840312156111c0576111bf61165d565b5b60006111ce84828501611153565b91505092915050565b6000602082840312156111ed576111ec61165d565b5b60006111fb84828501611168565b91505092915050565b61120d81611563565b82525050565b61121c816115be565b82525050565b600061122f601e8361143d565b915061123a82611662565b602082019050919050565b600061125260268361143d565b915061125d8261168b565b604082019050919050565b600061127560168361143d565b9150611280826116da565b602082019050919050565b6000611298601a8361143d565b91506112a382611703565b602082019050919050565b60006112bb60208361143d565b91506112c68261172c565b602082019050919050565b60006112de601f8361143d565b91506112e982611755565b602082019050919050565b6112fd816115b4565b82525050565b60006020820190506113186000830184611204565b92915050565b60006040820190506113336000830185611204565b61134060208301846112f4565b9392505050565b600060208201905061135c6000830184611213565b92915050565b6000602082019050818103600083015261137b81611222565b9050919050565b6000602082019050818103600083015261139b81611245565b9050919050565b600060208201905081810360008301526113bb81611268565b9050919050565b600060208201905081810360008301526113db8161128b565b9050919050565b600060208201905081810360008301526113fb816112ae565b9050919050565b6000602082019050818103600083015261141b816112d1565b9050919050565b600060208201905061143760008301846112f4565b92915050565b600082825260208201905092915050565b6000611459826115b4565b9150611464836115b4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611499576114986115d0565b5b828201905092915050565b60006114af826115b4565b91506114ba836115b4565b9250826114ca576114c96115ff565b5b828204905092915050565b60006114e0826115b4565b91506114eb836115b4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611524576115236115d0565b5b828202905092915050565b600061153a826115b4565b9150611545836115b4565b925082821015611558576115576115d0565b5b828203905092915050565b600061156e82611594565b9050919050565b60008115159050919050565b600081905061158f8261177e565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115c982611581565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b7f5769746864726177616c73206e6f7420617661696c61626c6520796574210000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f20746f6b656e7320746f2077697468647261772100000000000000000000600082015250565b7f4465706f73697420706572696f64206861732070617373656421000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6005811061178f5761178e61162e565b5b50565b61179b81611563565b81146117a657600080fd5b50565b6117b281611575565b81146117bd57600080fd5b50565b6117c9816115b4565b81146117d457600080fd5b5056fea2646970667358221220a1b098ab1eb133b32fb9f88be6d552f5d48b5ae3f292e910842a479276ef1f5e64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bank.sol:Bank",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Bank.sol:Bank",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 270,
        "contract": "contracts/Bank.sol:Bank",
        "label": "status",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(BankStatus)267"
      },
      {
        "astId": 280,
        "contract": "contracts/Bank.sol:Bank",
        "label": "R",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 284,
        "contract": "contracts/Bank.sol:Bank",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 286,
        "contract": "contracts/Bank.sol:Bank",
        "label": "stake",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(BankStatus)267": {
        "encoding": "inplace",
        "label": "enum Bank.BankStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}