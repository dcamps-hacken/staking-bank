{
  "address": "0xC3476d21cb44914C3AB457F4BB2F47841024bd65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Retrieve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldTokens",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "T",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getR1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getR2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getR3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "t0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x19a460d9be9fa7241631bf0c9fa48423031060dc3f65e2dbe2a9ac62c10215cf",
  "receipt": {
    "to": null,
    "from": "0xE5aD97f1731174D14A71D43Bd06E94a1D3e59A4a",
    "contractAddress": "0xC3476d21cb44914C3AB457F4BB2F47841024bd65",
    "transactionIndex": 0,
    "gasUsed": "1407708",
    "logsBloom": "0x
    "blockHash": "0xb0b778db543297ff8b8eef8a96bf02adc9badf354bd7de45e096695632127cea",
    "transactionHash": "0x19a460d9be9fa7241631bf0c9fa48423031060dc3f65e2dbe2a9ac62c10215cf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11211069,
        "transactionHash": "0x19a460d9be9fa7241631bf0c9fa48423031060dc3f65e2dbe2a9ac62c10215cf",
        "address": "0xC3476d21cb44914C3AB457F4BB2F47841024bd65",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e5ad97f1731174d14a71d43bd06e94a1d3e59a4a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb0b778db543297ff8b8eef8a96bf02adc9badf354bd7de45e096695632127cea"
      }
    ],
    "blockNumber": 11211069,
    "cumulativeGasUsed": "1407708",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x609fB1523F468e6d4e0Cd7B0F9DcCcc6E4a0B62c",
    "10000000000000000000000",
    "86400"
  ],
  "numDeployments": 1,
  "solcInputHash": "c1cb61cf58d7576d9f2ddb6beba33561",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Retrieve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldTokens\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getR1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getR2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getR3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"t0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Camps Novi\",\"details\":\"This contract uses a factory pattern to deploy a new wallet for each user\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_interval\":\"description here\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"EVM wallet generator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"@dev\"},\"deposit(uint256)\":{\"notice\":\"@dev\"},\"getR()\":{\"notice\":\"@dev\"},\"retrieve()\":{\"notice\":\"@dev\"},\"withdraw()\":{\"notice\":\"@dev\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/** @title EVM wallet generator\\r\\n *  @author David Camps Novi\\r\\n *  @dev This contract uses a factory pattern to deploy a new wallet for each user\\r\\n */\\r\\ncontract Bank is Ownable, ReentrancyGuard {\\r\\n    address public immutable token;\\r\\n    uint256 public immutable T;\\r\\n    uint256 public immutable t0;\\r\\n\\r\\n    /* Reward pools */\\r\\n    uint256 private R;\\r\\n    uint256 private R1;\\r\\n    uint256 private R2;\\r\\n    uint256 private R3;\\r\\n\\r\\n    /* Staking */\\r\\n    mapping(address => uint256) private balances;\\r\\n    uint256 private stake;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed amount);\\r\\n    event Withdrawal(\\r\\n        address indexed user,\\r\\n        uint256 indexed amount,\\r\\n        uint256 yieldTokens\\r\\n    );\\r\\n    event Retrieve(uint256 indexed amount);\\r\\n\\r\\n    /**\\r\\n     *  @notice\\r\\n     *  @dev\\r\\n     *  @param _interval description here\\r\\n     */\\r\\n    constructor(\\r\\n        address _token,\\r\\n        uint256 _reward,\\r\\n        uint256 _interval\\r\\n    ) {\\r\\n        token = _token;\\r\\n        T = _interval;\\r\\n        t0 = block.timestamp;\\r\\n        R1 = (_reward * 2) / 10;\\r\\n        R2 = (_reward * 3) / 10;\\r\\n        R3 = (_reward * 5) / 10;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice\\r\\n     *  @dev\\r\\n     */\\r\\n\\r\\n    //requires user approval !!!!\\r\\n    function deposit(uint256 _amount) external nonReentrant {\\r\\n        require(block.timestamp < t0 + T, \\\"Deposit period has passed\\\");\\r\\n        IERC20(token).transferFrom(msg.sender, address(this), _amount);\\r\\n        balances[msg.sender] += _amount;\\r\\n        stake += balances[msg.sender];\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice\\r\\n     *  @dev\\r\\n     */\\r\\n    function withdraw() external nonReentrant {\\r\\n        require(block.timestamp >= t0 + 2 * T, \\\"Withdrawals not available yet\\\");\\r\\n        require(balances[msg.sender] > 0, \\\"No tokens deposited\\\");\\r\\n        uint256 balance = balances[msg.sender];\\r\\n        uint256 yield = getR() * (balance / stake);\\r\\n        R -= yield;\\r\\n        balances[msg.sender] = 0;\\r\\n        stake -= balance;\\r\\n        IERC20(token).transfer(msg.sender, balance + yield);\\r\\n        emit Withdrawal(msg.sender, balance, yield);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice\\r\\n     *  @dev\\r\\n     */\\r\\n    function retrieve() external onlyOwner {\\r\\n        require(block.timestamp >= t0 + 4 * T, \\\"Retrieve not available yet\\\");\\r\\n        require(stake == 0, \\\"Tokens still staked\\\"); // can it actually be 0?\\r\\n        uint256 retrieveAmount = getR();\\r\\n        IERC20(token).transfer(msg.sender, retrieveAmount);\\r\\n        emit Retrieve(retrieveAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice\\r\\n     *  @dev\\r\\n     */\\r\\n    function getR() public returns (uint256) {\\r\\n        // Make sure all are whole numbers!!\\r\\n        if (block.timestamp < t0 + 3 * T) {\\r\\n            R += R1;\\r\\n            R1 = 0;\\r\\n        } else if (\\r\\n            block.timestamp >= t0 + 3 * T && block.timestamp < t0 + 4 * T\\r\\n        ) {\\r\\n            R += R1 + R2;\\r\\n            R1 = 0;\\r\\n            R2 = 0;\\r\\n        } else {\\r\\n            R += R1 + R2 + R3;\\r\\n            R1 = 0;\\r\\n            R2 = 0;\\r\\n            R3 = 0;\\r\\n        }\\r\\n        return R;\\r\\n    }\\r\\n\\r\\n    function getStake() public view returns (uint256) {\\r\\n        return stake;\\r\\n    }\\r\\n\\r\\n    function getBalance(address _user) public view returns (uint256 balance) {\\r\\n        balance = balances[_user];\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function getR1() public view returns (uint256) {\\r\\n        return R1;\\r\\n    }\\r\\n\\r\\n    function getR2() public view returns (uint256) {\\r\\n        return R2;\\r\\n    }\\r\\n\\r\\n    function getR3() public view returns (uint256) {\\r\\n        return R3;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xac2420954db2c355167613f94daff981151fd8e93c44eb54f5bfa210b8c64cbf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001acc38038062001acc833981810160405281019062000037919062000211565b620000576200004b6200011760201b60201c565b6200011f60201b60201c565b600180819055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060a081815250504260c08181525050600a600283620000b69190620002a5565b620000c291906200026d565b600381905550600a600383620000d99190620002a5565b620000e591906200026d565b600481905550600a600583620000fc9190620002a5565b6200010891906200026d565b600581905550505050620003db565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001f481620003a7565b92915050565b6000815190506200020b81620003c1565b92915050565b6000806000606084860312156200022d576200022c620003a2565b5b60006200023d86828701620001e3565b93505060206200025086828701620001fa565b92505060406200026386828701620001fa565b9150509250925092565b60006200027a826200033a565b915062000287836200033a565b9250826200029a576200029962000373565b5b828204905092915050565b6000620002b2826200033a565b9150620002bf836200033a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620002fb57620002fa62000344565b5b828202905092915050565b600062000313826200031a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b620003b28162000306565b8114620003be57600080fd5b50565b620003cc816200033a565b8114620003d857600080fd5b50565b60805160601c60a05160c05161165562000477600039600081816102e90152818161050a0152818161089701528181610ab901528181610b9a01528181610c210152610c83015260008181610290015281816102bc015281816104dd0152818161087601528181610b6d01528181610bf40152610c560152600081816103a7015281816106d8015281816109030152610d9301526116556000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063bed8d79911610097578063f637b63211610066578063f637b63214610204578063f8b2cb4f14610222578063fc0c546a14610252578063fc0e3d9014610270576100f5565b8063bed8d7991461018e578063c116690c146101ac578063c9be2d2e146101ca578063f2fde38b146101e8576100f5565b80633ccfd60b116100d35780633ccfd60b14610140578063715018a61461014a5780638da5cb5b14610154578063b6b55f2514610172576100f5565b80632bc80f3a146100fa5780632e64cec11461011857806330ee496514610122575b600080fd5b61010261028e565b60405161010f9190611280565b60405180910390f35b6101206102b2565b005b61012a610483565b6040516101379190611280565b60405180910390f35b61014861048d565b005b6101526107e9565b005b61015c6107fd565b6040516101699190611105565b60405180910390f35b61018c60048036038101906101879190610fa2565b610826565b005b610196610aad565b6040516101a39190611280565b60405180910390f35b6101b4610ab7565b6040516101c19190611280565b60405180910390f35b6101d2610adb565b6040516101df9190611280565b60405180910390f35b61020260048036038101906101fd9190610f48565b610ae5565b005b61020c610b69565b6040516102199190611280565b60405180910390f35b61023c60048036038101906102379190610f48565b610d48565b6040516102499190611280565b60405180910390f35b61025a610d91565b6040516102679190611105565b60405180910390f35b610278610db5565b6040516102859190611280565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6102ba610dbf565b7f000000000000000000000000000000000000000000000000000000000000000060046102e79190611333565b7f000000000000000000000000000000000000000000000000000000000000000061031291906112ac565b421015610354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034b906111e0565b60405180910390fd5b600060075414610399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039090611260565b60405180910390fd5b60006103a3610b69565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610400929190611157565b602060405180830381600087803b15801561041a57600080fd5b505af115801561042e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104529190610f75565b50807f7168014d1f0220e0c6fc272f854655453b451835dda3695efdae92ce86fcba6c60405160405180910390a250565b6000600554905090565b600260015414156104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca90611240565b60405180910390fd5b60026001819055507f000000000000000000000000000000000000000000000000000000000000000060026105089190611333565b7f000000000000000000000000000000000000000000000000000000000000000061053391906112ac565b421015610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90611200565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee906111a0565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006007548261064b9190611302565b610653610b69565b61065d9190611333565b90508060026000828254610671919061138d565b925050819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600760008282546106cf919061138d565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33838561071f91906112ac565b6040518363ffffffff1660e01b815260040161073c929190611157565b602060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190610f75565b50813373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb836040516107d69190611280565b60405180910390a3505060018081905550565b6107f1610dbf565b6107fb6000610e3d565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002600154141561086c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086390611240565b60405180910390fd5b60026001819055507f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006108c091906112ac565b4210610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f890611220565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161095e93929190611120565b602060405180830381600087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190610f75565b5080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a0091906112ac565b92505081905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076000828254610a5891906112ac565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60405160405180910390a36001808190555050565b6000600354905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600454905090565b610aed610dbf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5490611180565b60405180910390fd5b610b6681610e3d565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006003610b989190611333565b7f0000000000000000000000000000000000000000000000000000000000000000610bc391906112ac565b421015610bf25760035460026000828254610bde91906112ac565b925050819055506000600381905550610d40565b7f00000000000000000000000000000000000000000000000000000000000000006003610c1f9190611333565b7f0000000000000000000000000000000000000000000000000000000000000000610c4a91906112ac565b4210158015610caf57507f00000000000000000000000000000000000000000000000000000000000000006004610c819190611333565b7f0000000000000000000000000000000000000000000000000000000000000000610cac91906112ac565b42105b15610cf157600454600354610cc491906112ac565b60026000828254610cd591906112ac565b9250508190555060006003819055506000600481905550610d3f565b600554600454600354610d0491906112ac565b610d0e91906112ac565b60026000828254610d1f91906112ac565b925050819055506000600381905550600060048190555060006005819055505b5b600254905090565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600754905090565b610dc7610f01565b73ffffffffffffffffffffffffffffffffffffffff16610de56107fd565b73ffffffffffffffffffffffffffffffffffffffff1614610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e32906111c0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050610f18816115da565b92915050565b600081519050610f2d816115f1565b92915050565b600081359050610f4281611608565b92915050565b600060208284031215610f5e57610f5d611467565b5b6000610f6c84828501610f09565b91505092915050565b600060208284031215610f8b57610f8a611467565b5b6000610f9984828501610f1e565b91505092915050565b600060208284031215610fb857610fb7611467565b5b6000610fc684828501610f33565b91505092915050565b610fd8816113c1565b82525050565b6000610feb60268361129b565b9150610ff68261146c565b604082019050919050565b600061100e60138361129b565b9150611019826114bb565b602082019050919050565b600061103160208361129b565b915061103c826114e4565b602082019050919050565b6000611054601a8361129b565b915061105f8261150d565b602082019050919050565b6000611077601d8361129b565b915061108282611536565b602082019050919050565b600061109a60198361129b565b91506110a58261155f565b602082019050919050565b60006110bd601f8361129b565b91506110c882611588565b602082019050919050565b60006110e060138361129b565b91506110eb826115b1565b602082019050919050565b6110ff816113ff565b82525050565b600060208201905061111a6000830184610fcf565b92915050565b60006060820190506111356000830186610fcf565b6111426020830185610fcf565b61114f60408301846110f6565b949350505050565b600060408201905061116c6000830185610fcf565b61117960208301846110f6565b9392505050565b6000602082019050818103600083015261119981610fde565b9050919050565b600060208201905081810360008301526111b981611001565b9050919050565b600060208201905081810360008301526111d981611024565b9050919050565b600060208201905081810360008301526111f981611047565b9050919050565b600060208201905081810360008301526112198161106a565b9050919050565b600060208201905081810360008301526112398161108d565b9050919050565b60006020820190508181036000830152611259816110b0565b9050919050565b60006020820190508181036000830152611279816110d3565b9050919050565b600060208201905061129560008301846110f6565b92915050565b600082825260208201905092915050565b60006112b7826113ff565b91506112c2836113ff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112f7576112f6611409565b5b828201905092915050565b600061130d826113ff565b9150611318836113ff565b92508261132857611327611438565b5b828204905092915050565b600061133e826113ff565b9150611349836113ff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561138257611381611409565b5b828202905092915050565b6000611398826113ff565b91506113a3836113ff565b9250828210156113b6576113b5611409565b5b828203905092915050565b60006113cc826113df565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f20746f6b656e73206465706f736974656400000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5265747269657665206e6f7420617661696c61626c6520796574000000000000600082015250565b7f5769746864726177616c73206e6f7420617661696c61626c6520796574000000600082015250565b7f4465706f73697420706572696f64206861732070617373656400000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f546f6b656e73207374696c6c207374616b656400000000000000000000000000600082015250565b6115e3816113c1565b81146115ee57600080fd5b50565b6115fa816113d3565b811461160557600080fd5b50565b611611816113ff565b811461161c57600080fd5b5056fea26469706673582212208df5c9c604d98628d3aa41bedd493f1c5c5e4eb8fa2f2c58faff03d69be5621764736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063bed8d79911610097578063f637b63211610066578063f637b63214610204578063f8b2cb4f14610222578063fc0c546a14610252578063fc0e3d9014610270576100f5565b8063bed8d7991461018e578063c116690c146101ac578063c9be2d2e146101ca578063f2fde38b146101e8576100f5565b80633ccfd60b116100d35780633ccfd60b14610140578063715018a61461014a5780638da5cb5b14610154578063b6b55f2514610172576100f5565b80632bc80f3a146100fa5780632e64cec11461011857806330ee496514610122575b600080fd5b61010261028e565b60405161010f9190611280565b60405180910390f35b6101206102b2565b005b61012a610483565b6040516101379190611280565b60405180910390f35b61014861048d565b005b6101526107e9565b005b61015c6107fd565b6040516101699190611105565b60405180910390f35b61018c60048036038101906101879190610fa2565b610826565b005b610196610aad565b6040516101a39190611280565b60405180910390f35b6101b4610ab7565b6040516101c19190611280565b60405180910390f35b6101d2610adb565b6040516101df9190611280565b60405180910390f35b61020260048036038101906101fd9190610f48565b610ae5565b005b61020c610b69565b6040516102199190611280565b60405180910390f35b61023c60048036038101906102379190610f48565b610d48565b6040516102499190611280565b60405180910390f35b61025a610d91565b6040516102679190611105565b60405180910390f35b610278610db5565b6040516102859190611280565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6102ba610dbf565b7f000000000000000000000000000000000000000000000000000000000000000060046102e79190611333565b7f000000000000000000000000000000000000000000000000000000000000000061031291906112ac565b421015610354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034b906111e0565b60405180910390fd5b600060075414610399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039090611260565b60405180910390fd5b60006103a3610b69565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610400929190611157565b602060405180830381600087803b15801561041a57600080fd5b505af115801561042e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104529190610f75565b50807f7168014d1f0220e0c6fc272f854655453b451835dda3695efdae92ce86fcba6c60405160405180910390a250565b6000600554905090565b600260015414156104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca90611240565b60405180910390fd5b60026001819055507f000000000000000000000000000000000000000000000000000000000000000060026105089190611333565b7f000000000000000000000000000000000000000000000000000000000000000061053391906112ac565b421015610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90611200565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee906111a0565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006007548261064b9190611302565b610653610b69565b61065d9190611333565b90508060026000828254610671919061138d565b925050819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600760008282546106cf919061138d565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33838561071f91906112ac565b6040518363ffffffff1660e01b815260040161073c929190611157565b602060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190610f75565b50813373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb836040516107d69190611280565b60405180910390a3505060018081905550565b6107f1610dbf565b6107fb6000610e3d565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002600154141561086c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086390611240565b60405180910390fd5b60026001819055507f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006108c091906112ac565b4210610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f890611220565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161095e93929190611120565b602060405180830381600087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190610f75565b5080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a0091906112ac565b92505081905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076000828254610a5891906112ac565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60405160405180910390a36001808190555050565b6000600354905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600454905090565b610aed610dbf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5490611180565b60405180910390fd5b610b6681610e3d565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006003610b989190611333565b7f0000000000000000000000000000000000000000000000000000000000000000610bc391906112ac565b421015610bf25760035460026000828254610bde91906112ac565b925050819055506000600381905550610d40565b7f00000000000000000000000000000000000000000000000000000000000000006003610c1f9190611333565b7f0000000000000000000000000000000000000000000000000000000000000000610c4a91906112ac565b4210158015610caf57507f00000000000000000000000000000000000000000000000000000000000000006004610c819190611333565b7f0000000000000000000000000000000000000000000000000000000000000000610cac91906112ac565b42105b15610cf157600454600354610cc491906112ac565b60026000828254610cd591906112ac565b9250508190555060006003819055506000600481905550610d3f565b600554600454600354610d0491906112ac565b610d0e91906112ac565b60026000828254610d1f91906112ac565b925050819055506000600381905550600060048190555060006005819055505b5b600254905090565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600754905090565b610dc7610f01565b73ffffffffffffffffffffffffffffffffffffffff16610de56107fd565b73ffffffffffffffffffffffffffffffffffffffff1614610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e32906111c0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050610f18816115da565b92915050565b600081519050610f2d816115f1565b92915050565b600081359050610f4281611608565b92915050565b600060208284031215610f5e57610f5d611467565b5b6000610f6c84828501610f09565b91505092915050565b600060208284031215610f8b57610f8a611467565b5b6000610f9984828501610f1e565b91505092915050565b600060208284031215610fb857610fb7611467565b5b6000610fc684828501610f33565b91505092915050565b610fd8816113c1565b82525050565b6000610feb60268361129b565b9150610ff68261146c565b604082019050919050565b600061100e60138361129b565b9150611019826114bb565b602082019050919050565b600061103160208361129b565b915061103c826114e4565b602082019050919050565b6000611054601a8361129b565b915061105f8261150d565b602082019050919050565b6000611077601d8361129b565b915061108282611536565b602082019050919050565b600061109a60198361129b565b91506110a58261155f565b602082019050919050565b60006110bd601f8361129b565b91506110c882611588565b602082019050919050565b60006110e060138361129b565b91506110eb826115b1565b602082019050919050565b6110ff816113ff565b82525050565b600060208201905061111a6000830184610fcf565b92915050565b60006060820190506111356000830186610fcf565b6111426020830185610fcf565b61114f60408301846110f6565b949350505050565b600060408201905061116c6000830185610fcf565b61117960208301846110f6565b9392505050565b6000602082019050818103600083015261119981610fde565b9050919050565b600060208201905081810360008301526111b981611001565b9050919050565b600060208201905081810360008301526111d981611024565b9050919050565b600060208201905081810360008301526111f981611047565b9050919050565b600060208201905081810360008301526112198161106a565b9050919050565b600060208201905081810360008301526112398161108d565b9050919050565b60006020820190508181036000830152611259816110b0565b9050919050565b60006020820190508181036000830152611279816110d3565b9050919050565b600060208201905061129560008301846110f6565b92915050565b600082825260208201905092915050565b60006112b7826113ff565b91506112c2836113ff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112f7576112f6611409565b5b828201905092915050565b600061130d826113ff565b9150611318836113ff565b92508261132857611327611438565b5b828204905092915050565b600061133e826113ff565b9150611349836113ff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561138257611381611409565b5b828202905092915050565b6000611398826113ff565b91506113a3836113ff565b9250828210156113b6576113b5611409565b5b828203905092915050565b60006113cc826113df565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f20746f6b656e73206465706f736974656400000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5265747269657665206e6f7420617661696c61626c6520796574000000000000600082015250565b7f5769746864726177616c73206e6f7420617661696c61626c6520796574000000600082015250565b7f4465706f73697420706572696f64206861732070617373656400000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f546f6b656e73207374696c6c207374616b656400000000000000000000000000600082015250565b6115e3816113c1565b81146115ee57600080fd5b50565b6115fa816113d3565b811461160557600080fd5b50565b611611816113ff565b811461161c57600080fd5b5056fea26469706673582212208df5c9c604d98628d3aa41bedd493f1c5c5e4eb8fa2f2c58faff03d69be5621764736f6c63430008070033",
  "devdoc": {
    "author": "David Camps Novi",
    "details": "This contract uses a factory pattern to deploy a new wallet for each user",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_interval": "description here"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "EVM wallet generator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "@dev"
      },
      "deposit(uint256)": {
        "notice": "@dev"
      },
      "getR()": {
        "notice": "@dev"
      },
      "retrieve()": {
        "notice": "@dev"
      },
      "withdraw()": {
        "notice": "@dev"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Bank.sol:Bank",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Bank.sol:Bank",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 881,
        "contract": "contracts/Bank.sol:Bank",
        "label": "R",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 883,
        "contract": "contracts/Bank.sol:Bank",
        "label": "R1",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 885,
        "contract": "contracts/Bank.sol:Bank",
        "label": "R2",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 887,
        "contract": "contracts/Bank.sol:Bank",
        "label": "R3",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 891,
        "contract": "contracts/Bank.sol:Bank",
        "label": "balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 893,
        "contract": "contracts/Bank.sol:Bank",
        "label": "stake",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}